<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/backend/src/main/java/com/example/backend/Service/IMPL/courseServiceIMPL.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/main/java/com/example/backend/Service/IMPL/courseServiceIMPL.java" />
              <option name="originalContent" value="package com.example.backend.Service.IMPL;&#10;&#10;import com.example.backend.DTO.courseDTO;&#10;import com.example.backend.Service.CourseService;&#10;import com.google.firebase.database.DatabaseReference;&#10;import com.google.firebase.database.FirebaseDatabase;&#10;import org.springframework.stereotype.Service;&#10;&#10;import javax.annotation.PostConstruct;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.concurrent.ExecutionException;&#10;&#10;@Service&#10;public class courseServiceIMPL implements CourseService {&#10;&#10;    private DatabaseReference courseRef;&#10;&#10;    public courseServiceIMPL() {&#10;        // Delay FirebaseDatabase initialization until FirebaseApp is ready&#10;    }&#10;&#10;    @PostConstruct&#10;    public void init() {&#10;        this.courseRef = FirebaseDatabase.getInstance().getReference(&quot;courses&quot;);&#10;    }&#10;&#10;    @Override&#10;    public String saveCourse(courseDTO courseDTO) {&#10;        try {&#10;            String key = courseRef.push().getKey();&#10;            courseDTO.setId(key); // Use String for id&#10;            courseRef.child(key).setValueAsync(courseDTO);&#10;            return &quot;Course saved successfully&quot;;&#10;        } catch (Exception e) {&#10;            return &quot;Error saving course: &quot; + e.getMessage();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public List&lt;courseDTO&gt; getAllCourses() {&#10;        List&lt;courseDTO&gt; courseList = new ArrayList&lt;&gt;();&#10;        try {&#10;            // Use Firebase Database API for async data retrieval&#10;            final Object lock = new Object();&#10;            final List&lt;courseDTO&gt; tempList = new ArrayList&lt;&gt;();&#10;            courseRef.addListenerForSingleValueEvent(new com.google.firebase.database.ValueEventListener() {&#10;                @Override&#10;                public void onDataChange(com.google.firebase.database.DataSnapshot snapshot) {&#10;                    if (snapshot.exists()) {&#10;                        for (com.google.firebase.database.DataSnapshot child : snapshot.getChildren()) {&#10;                            courseDTO dto = child.getValue(courseDTO.class);&#10;                            if (dto != null) tempList.add(dto);&#10;                        }&#10;                    }&#10;                    synchronized (lock) {&#10;                        lock.notify();&#10;                    }&#10;                }&#10;                @Override&#10;                public void onCancelled(com.google.firebase.database.DatabaseError error) {&#10;                    synchronized (lock) {&#10;                        lock.notify();&#10;                    }&#10;                }&#10;            });&#10;            synchronized (lock) {&#10;                lock.wait(3000); // Wait for up to 3 seconds for async callback&#10;            }&#10;            courseList.addAll(tempList);&#10;        } catch (InterruptedException e) {&#10;            Thread.currentThread().interrupt();&#10;        }&#10;        return courseList;&#10;    }&#10;&#10;    @Override&#10;    public courseDTO updateCourse(courseDTO courseDTO) {&#10;        try {&#10;            courseRef.child(courseDTO.getId()).setValueAsync(courseDTO);&#10;            return courseDTO;&#10;        } catch (Exception e) {&#10;            return null;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public String deleteCourse(String id) {&#10;        try {&#10;            courseRef.child(id).removeValueAsync();&#10;            return &quot;Course deleted successfully&quot;;&#10;        } catch (Exception e) {&#10;            return &quot;Error deleting course: &quot; + e.getMessage();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public courseDTO getCourseById(String id) {&#10;        final Object lock = new Object();&#10;        final courseDTO[] result = new courseDTO[1];&#10;        courseRef.child(id).addListenerForSingleValueEvent(new com.google.firebase.database.ValueEventListener() {&#10;            @Override&#10;            public void onDataChange(com.google.firebase.database.DataSnapshot snapshot) {&#10;                if (snapshot.exists()) {&#10;                    result[0] = snapshot.getValue(courseDTO.class);&#10;                }&#10;                synchronized (lock) {&#10;                    lock.notify();&#10;                }&#10;            }&#10;            @Override&#10;            public void onCancelled(com.google.firebase.database.DatabaseError error) {&#10;                synchronized (lock) {&#10;                    lock.notify();&#10;                }&#10;            }&#10;        });&#10;        try {&#10;            synchronized (lock) {&#10;                lock.wait(3000); // Wait for up to 3 seconds for async callback&#10;            }&#10;        } catch (InterruptedException e) {&#10;            Thread.currentThread().interrupt();&#10;        }&#10;        return result[0];&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.backend.Service.IMPL;&#10;&#10;import com.example.backend.DTO.courseDTO;&#10;import com.example.backend.Service.CourseService;&#10;import com.google.firebase.FirebaseApp;&#10;import com.google.firebase.database.DatabaseReference;&#10;import com.google.firebase.database.FirebaseDatabase;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.concurrent.ExecutionException;&#10;&#10;@Service&#10;public class courseServiceIMPL implements CourseService {&#10;&#10;    private final DatabaseReference courseRef;&#10;&#10;    @Autowired&#10;    public courseServiceIMPL(FirebaseApp firebaseApp) {&#10;        this.courseRef = FirebaseDatabase.getInstance(firebaseApp).getReference(&quot;courses&quot;);&#10;    }&#10;&#10;    @Override&#10;    public String saveCourse(courseDTO courseDTO) {&#10;        try {&#10;            String key = courseRef.push().getKey();&#10;            courseDTO.setId(key); // Use String for id&#10;            courseRef.child(key).setValueAsync(courseDTO);&#10;            return &quot;Course saved successfully&quot;;&#10;        } catch (Exception e) {&#10;            return &quot;Error saving course: &quot; + e.getMessage();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public List&lt;courseDTO&gt; getAllCourses() {&#10;        List&lt;courseDTO&gt; courseList = new ArrayList&lt;&gt;();&#10;        try {&#10;            // Use Firebase Database API for async data retrieval&#10;            final Object lock = new Object();&#10;            final List&lt;courseDTO&gt; tempList = new ArrayList&lt;&gt;();&#10;            courseRef.addListenerForSingleValueEvent(new com.google.firebase.database.ValueEventListener() {&#10;                @Override&#10;                public void onDataChange(com.google.firebase.database.DataSnapshot snapshot) {&#10;                    if (snapshot.exists()) {&#10;                        for (com.google.firebase.database.DataSnapshot child : snapshot.getChildren()) {&#10;                            courseDTO dto = child.getValue(courseDTO.class);&#10;                            if (dto != null) tempList.add(dto);&#10;                        }&#10;                    }&#10;                    synchronized (lock) {&#10;                        lock.notify();&#10;                    }&#10;                }&#10;                @Override&#10;                public void onCancelled(com.google.firebase.database.DatabaseError error) {&#10;                    synchronized (lock) {&#10;                        lock.notify();&#10;                    }&#10;                }&#10;            });&#10;            synchronized (lock) {&#10;                lock.wait(3000); // Wait for up to 3 seconds for async callback&#10;            }&#10;            courseList.addAll(tempList);&#10;        } catch (InterruptedException e) {&#10;            Thread.currentThread().interrupt();&#10;        }&#10;        return courseList;&#10;    }&#10;&#10;    @Override&#10;    public courseDTO updateCourse(courseDTO courseDTO) {&#10;        try {&#10;            courseRef.child(courseDTO.getId()).setValueAsync(courseDTO);&#10;            return courseDTO;&#10;        } catch (Exception e) {&#10;            return null;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public String deleteCourse(String id) {&#10;        try {&#10;            courseRef.child(id).removeValueAsync();&#10;            return &quot;Course deleted successfully&quot;;&#10;        } catch (Exception e) {&#10;            return &quot;Error deleting course: &quot; + e.getMessage();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public courseDTO getCourseById(String id) {&#10;        final Object lock = new Object();&#10;        final courseDTO[] result = new courseDTO[1];&#10;        courseRef.child(id).addListenerForSingleValueEvent(new com.google.firebase.database.ValueEventListener() {&#10;            @Override&#10;            public void onDataChange(com.google.firebase.database.DataSnapshot snapshot) {&#10;                if (snapshot.exists()) {&#10;                    result[0] = snapshot.getValue(courseDTO.class);&#10;                }&#10;                synchronized (lock) {&#10;                    lock.notify();&#10;                }&#10;            }&#10;            @Override&#10;            public void onCancelled(com.google.firebase.database.DatabaseError error) {&#10;                synchronized (lock) {&#10;                    lock.notify();&#10;                }&#10;            }&#10;        });&#10;        try {&#10;            synchronized (lock) {&#10;                lock.wait(3000); // Wait for up to 3 seconds for async callback&#10;            }&#10;        } catch (InterruptedException e) {&#10;            Thread.currentThread().interrupt();&#10;        }&#10;        return result[0];&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/main/java/com/example/backend/Service/IMPL/studentServiceIMPL.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/main/java/com/example/backend/Service/IMPL/studentServiceIMPL.java" />
              <option name="originalContent" value="package com.example.backend.Service.IMPL;&#10;&#10;import com.example.backend.DTO.studentDTO;&#10;import com.example.backend.Service.studentService;&#10;import com.google.firebase.database.DatabaseReference;&#10;import com.google.firebase.database.FirebaseDatabase;&#10;import org.springframework.stereotype.Service;&#10;&#10;import javax.annotation.PostConstruct;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;@Service&#10;public class studentServiceIMPL implements studentService {&#10;&#10;    private DatabaseReference studentRef;&#10;&#10;    public studentServiceIMPL() {&#10;        // Delay FirebaseDatabase initialization until FirebaseApp is ready&#10;    }&#10;&#10;    @PostConstruct&#10;    public void init() {&#10;        this.studentRef = FirebaseDatabase.getInstance().getReference(&quot;students&quot;);&#10;    }&#10;&#10;    @Override&#10;    public String saveStudent(studentDTO studentDTO) {&#10;        try {&#10;            String key = studentRef.push().getKey();&#10;            studentDTO.setId(key); // Use String for id&#10;            studentRef.child(key).setValueAsync(studentDTO);&#10;            return &quot;Student saved successfully&quot;;&#10;        } catch (Exception e) {&#10;            return &quot;Error saving student: &quot; + e.getMessage();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public List&lt;studentDTO&gt; getAllStudents() {&#10;        List&lt;studentDTO&gt; studentList = new ArrayList&lt;&gt;();&#10;        try {&#10;            // Use Firebase Database API for async data retrieval&#10;            final Object lock = new Object();&#10;            final List&lt;studentDTO&gt; tempList = new ArrayList&lt;&gt;();&#10;            studentRef.addListenerForSingleValueEvent(new com.google.firebase.database.ValueEventListener() {&#10;                @Override&#10;                public void onDataChange(com.google.firebase.database.DataSnapshot snapshot) {&#10;                    if (snapshot.exists()) {&#10;                        for (com.google.firebase.database.DataSnapshot child : snapshot.getChildren()) {&#10;                            studentDTO dto = child.getValue(studentDTO.class);&#10;                            if (dto != null) tempList.add(dto);&#10;                        }&#10;                    }&#10;                    synchronized (lock) {&#10;                        lock.notify();&#10;                    }&#10;                }&#10;                @Override&#10;                public void onCancelled(com.google.firebase.database.DatabaseError error) {&#10;                    synchronized (lock) {&#10;                        lock.notify();&#10;                    }&#10;                }&#10;            });&#10;            synchronized (lock) {&#10;                lock.wait(3000); // Wait for up to 3 seconds for async callback&#10;            }&#10;            studentList.addAll(tempList);&#10;        } catch (InterruptedException e) {&#10;            Thread.currentThread().interrupt();&#10;        }&#10;        return studentList;&#10;    }&#10;&#10;    @Override&#10;    public studentDTO updateStudent(studentDTO studentDTO) {&#10;        try {&#10;            studentRef.child(studentDTO.getId()).setValueAsync(studentDTO);&#10;            return studentDTO;&#10;        } catch (Exception e) {&#10;            return null;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public String deleteStudent(Long id) {&#10;        return &quot;&quot;;&#10;    }&#10;&#10;    @Override&#10;    public studentDTO getStudentById(Long id) {&#10;        return null;&#10;    }&#10;&#10;    @Override&#10;    public String deleteStudent(String id) {&#10;        try {&#10;            studentRef.child(id).removeValueAsync();&#10;            return &quot;Student deleted successfully&quot;;&#10;        } catch (Exception e) {&#10;            return &quot;Error deleting student: &quot; + e.getMessage();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public studentDTO getStudentById(String id) {&#10;        final Object lock = new Object();&#10;        final studentDTO[] result = new studentDTO[1];&#10;        studentRef.child(id).addListenerForSingleValueEvent(new com.google.firebase.database.ValueEventListener() {&#10;            @Override&#10;            public void onDataChange(com.google.firebase.database.DataSnapshot snapshot) {&#10;                if (snapshot.exists()) {&#10;                    result[0] = snapshot.getValue(studentDTO.class);&#10;                }&#10;                synchronized (lock) {&#10;                    lock.notify();&#10;                }&#10;            }&#10;            @Override&#10;            public void onCancelled(com.google.firebase.database.DatabaseError error) {&#10;                synchronized (lock) {&#10;                    lock.notify();&#10;                }&#10;            }&#10;        });&#10;        try {&#10;            synchronized (lock) {&#10;                lock.wait(3000); // Wait for up to 3 seconds for async callback&#10;            }&#10;        } catch (InterruptedException e) {&#10;            Thread.currentThread().interrupt();&#10;        }&#10;        return result[0];&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.backend.Service.IMPL;&#10;&#10;import com.example.backend.DTO.studentDTO;&#10;import com.example.backend.Service.studentService;&#10;import com.google.firebase.FirebaseApp;&#10;import com.google.firebase.database.DatabaseReference;&#10;import com.google.firebase.database.FirebaseDatabase;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;@Service&#10;public class studentServiceIMPL implements studentService {&#10;&#10;    private final DatabaseReference studentRef;&#10;&#10;    @Autowired&#10;    public studentServiceIMPL(FirebaseApp firebaseApp) {&#10;        this.studentRef = FirebaseDatabase.getInstance(firebaseApp).getReference(&quot;students&quot;);&#10;    }&#10;&#10;    @Override&#10;    public String saveStudent(studentDTO studentDTO) {&#10;        try {&#10;            String key = studentRef.push().getKey();&#10;            studentDTO.setId(key); // Use String for id&#10;            studentRef.child(key).setValueAsync(studentDTO);&#10;            return &quot;Student saved successfully&quot;;&#10;        } catch (Exception e) {&#10;            return &quot;Error saving student: &quot; + e.getMessage();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public List&lt;studentDTO&gt; getAllStudents() {&#10;        List&lt;studentDTO&gt; studentList = new ArrayList&lt;&gt;();&#10;        try {&#10;            // Use Firebase Database API for async data retrieval&#10;            final Object lock = new Object();&#10;            final List&lt;studentDTO&gt; tempList = new ArrayList&lt;&gt;();&#10;            studentRef.addListenerForSingleValueEvent(new com.google.firebase.database.ValueEventListener() {&#10;                @Override&#10;                public void onDataChange(com.google.firebase.database.DataSnapshot snapshot) {&#10;                    if (snapshot.exists()) {&#10;                        for (com.google.firebase.database.DataSnapshot child : snapshot.getChildren()) {&#10;                            studentDTO dto = child.getValue(studentDTO.class);&#10;                            if (dto != null) tempList.add(dto);&#10;                        }&#10;                    }&#10;                    synchronized (lock) {&#10;                        lock.notify();&#10;                    }&#10;                }&#10;                @Override&#10;                public void onCancelled(com.google.firebase.database.DatabaseError error) {&#10;                    synchronized (lock) {&#10;                        lock.notify();&#10;                    }&#10;                }&#10;            });&#10;            synchronized (lock) {&#10;                lock.wait(3000); // Wait for up to 3 seconds for async callback&#10;            }&#10;            studentList.addAll(tempList);&#10;        } catch (InterruptedException e) {&#10;            Thread.currentThread().interrupt();&#10;        }&#10;        return studentList;&#10;    }&#10;&#10;    @Override&#10;    public studentDTO updateStudent(studentDTO studentDTO) {&#10;        try {&#10;            studentRef.child(studentDTO.getId()).setValueAsync(studentDTO);&#10;            return studentDTO;&#10;        } catch (Exception e) {&#10;            return null;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public String deleteStudent(Long id) {&#10;        return &quot;&quot;;&#10;    }&#10;&#10;    @Override&#10;    public studentDTO getStudentById(Long id) {&#10;        return null;&#10;    }&#10;&#10;    @Override&#10;    public String deleteStudent(String id) {&#10;        try {&#10;            studentRef.child(id).removeValueAsync();&#10;            return &quot;Student deleted successfully&quot;;&#10;        } catch (Exception e) {&#10;            return &quot;Error deleting student: &quot; + e.getMessage();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public studentDTO getStudentById(String id) {&#10;        final Object lock = new Object();&#10;        final studentDTO[] result = new studentDTO[1];&#10;        studentRef.child(id).addListenerForSingleValueEvent(new com.google.firebase.database.ValueEventListener() {&#10;            @Override&#10;            public void onDataChange(com.google.firebase.database.DataSnapshot snapshot) {&#10;                if (snapshot.exists()) {&#10;                    result[0] = snapshot.getValue(studentDTO.class);&#10;                }&#10;                synchronized (lock) {&#10;                    lock.notify();&#10;                }&#10;            }&#10;            @Override&#10;            public void onCancelled(com.google.firebase.database.DatabaseError error) {&#10;                synchronized (lock) {&#10;                    lock.notify();&#10;                }&#10;            }&#10;        });&#10;        try {&#10;            synchronized (lock) {&#10;                lock.wait(3000); // Wait for up to 3 seconds for async callback&#10;            }&#10;        } catch (InterruptedException e) {&#10;            Thread.currentThread().interrupt();&#10;        }&#10;        return result[0];&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>